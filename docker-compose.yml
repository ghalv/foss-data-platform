# Docker Compose configuration for FOSS Data Platform

services:
  # JupyterLab for interactive data work
  jupyterlab:
    image: jupyter/datascience-notebook:latest
    container_name: jupyterlab
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=fossdata123
      - JUPYTER_CONFIG_DIR=/home/jovyan/.jupyter
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./dbt_stavanger_parking:/home/jovyan/pipeline
      - ./data:/home/jovyan/data
      - ./config/jupyter:/home/jovyan/.jupyter
    working_dir: /home/jovyan/work
    command: jupyter lab --ServerApp.token='' --ServerApp.ip=0.0.0.0 --ServerApp.allow_root=true --ServerApp.password_required=false
    networks:
      - data-platform
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dagster for orchestration
  dagster:
    build:
      context: ./dagster
      dockerfile: Dockerfile
    container_name: dagster
    ports:
      - "3000:3000"
    environment:
      - DAGSTER_HOME=/opt/dagster/dagster_home
    volumes:
      - ./dagster:/opt/dagster/app
      - ./data:/opt/dagster/data
    working_dir: /opt/dagster
    command: dagster-webserver -h 0.0.0.0 -p 3000 -f /opt/dagster/app/workspace.yaml
    networks:
      - data-platform
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Apache Trino for querying
  trino-coordinator:
    image: trinodb/trino:latest
    container_name: trino-coordinator
    ports:
      - "8080:8080"
    environment:
      - COORDINATOR=true
      - DISCOVERY_URI=http://trino-coordinator:8080
    volumes:
      - ./config/trino:/etc/trino
      - ./data:/data
    networks:
      - data-platform
    restart: unless-stopped

  trino-worker:
    image: trinodb/trino:latest
    container_name: trino-worker
    environment:
      - COORDINATOR=false
      - DISCOVERY_URI=http://trino-coordinator:8080
    volumes:
      - ./config/trino:/etc/trino
      - ./data:/data
    depends_on:
      - trino-coordinator
    networks:
      - data-platform
    restart: unless-stopped

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123
    volumes:
      - ./data/minio:/data
      - ./config/minio:/scripts
      - ./config/minio:/etc/minio
    command: server /data --console-address ":9001" --anonymous
    networks:
      - data-platform
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - data-platform
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana:/var/lib/grafana
    networks:
      - data-platform
    restart: unless-stopped

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=dagster
      - POSTGRES_USER=dagster
      - POSTGRES_PASSWORD=dagster123
    volumes:
      - ./data/postgres:/var/run/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d
    networks:
      - data-platform
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dagster -d dagster"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - data-platform
    restart: unless-stopped

  # Platform Dashboard
  dashboard:
    build: ./dashboard
    container_name: dashboard
    ports:
      - "5000:5000"
    volumes:
      - ./dashboard:/app
      - ./dbt_stavanger_parking:/app/dbt_stavanger_parking
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py
    networks:
      - data-platform
    restart: unless-stopped

  # Portainer for container management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9000:9000"
    environment:
      - PORTAINER_ADMIN_PASSWORD=admin123
      - PORTAINER_EDGE=0
      - PORTAINER_EDGE_INSECURE_POLL=0
      - PORTAINER_EDGE_ASYNC=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/portainer:/data
      - ./data/portainer:/var/lib/portainer
    networks:
      - data-platform
    restart: unless-stopped

networks:
  data-platform:
    driver: bridge

volumes:
  data:
    driver: local
